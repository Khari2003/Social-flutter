require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cloudinary = require('cloudinary').v2;
const cors = require('cors');
const fs = require('fs');

const app = express();
app.use(cors());
app.use(express.json());

// Cáº¥u hÃ¬nh Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// Cáº¥u hÃ¬nh Multer (lÆ°u file táº¡m)
const upload = multer({ dest: 'uploads/' });

// API upload file lÃªn Cloudinary theo loáº¡i file
app.post('/upload', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'No file uploaded' });

    const fileType = req.body.type || 'auto'; // image, video, audio
    let folder = 'uploads'; // Máº·c Ä‘á»‹nh

    // XÃ¡c Ä‘á»‹nh thÆ° má»¥c lÆ°u trÃªn Cloudinary
    if (fileType === 'image') {
      folder = 'images';
    } else if (fileType === 'video') {
      folder = 'videos';
    } else if (fileType === 'audio') {
      folder = 'voices';
    }

    // Upload file lÃªn Cloudinary
    const result = await cloudinary.uploader.upload(req.file.path, {
      resource_type: fileType,
      folder: folder, // LÆ°u vÃ o thÆ° má»¥c tÆ°Æ¡ng á»©ng
    });

    // XÃ³a file táº¡m
    fs.unlinkSync(req.file.path);

    res.json({ message: 'Upload thÃ nh cÃ´ng!', url: result.secure_url });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Lá»—i khi upload' });
  }
});

// Cháº¡y server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Server cháº¡y táº¡i http://192.168.170.200:${PORT}`);
});
